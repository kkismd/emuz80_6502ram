--- VTLC02	2023-02-11 21:44:38.605773583 +0900
+++ vtlc02.asm	2023-02-11 20:41:52.876997161 +0900
@@ -1,3 +1,5 @@
+!cpu 65C02
+!to "vtlc02.o", plain
 ;234567890123456789012345678901234567890123456789012345
 ;-----------------------------------------------------;
 ;             VTL-2 for the 65C02 (VTLC02)            ;
@@ -209,14 +211,22 @@
 OP_OR    = '|'      ; Bit-wise OR operator
 linbuf   = $0200    ; input line buffer
 prgm     = $0400    ; VTLC02 program grows from here
-himem    = $f000    ;   ... up to the top of user RAM
-vtlc02   = $fc00    ; interpreter cold entry point
+himem    = $d000    ;   ... up to the top of user RAM
+vtlc02   = $f100    ; interpreter cold entry point
 ;                     (warm entry point is startok)
-io_area  = $f000      ;configure simulator terminal I/O
-acia_tx  = io_area+1  ;acia tx data register
-acia_rx  = io_area+4  ;acia rx data register
+; io_area  = $f000      ;configure simulator terminal I/O
+; acia_tx  = io_area+1  ;acia tx data register
+; acia_rx  = io_area+4  ;acia rx data register
+
+; EMUZ80 serial I/O
+ACIAC    = $B018
+ACIAD    = $B019
+CONINIT  = $FD1B
+CONIN    = $FD28
+CONST    = $FD33
+CONOUT   = $FD39
 ;=====================================================;
-    .org vtlc02
+    *= vtlc02
 ;-----------------------------------------------------;
 ; Initialize program area pointers and start VTLC02
 ; 17 bytes
@@ -228,6 +238,7 @@
     sta  star       ; {*} -> top of user RAM
     lda  #>himem    ;
     sta  star+1     ;
+    jsr  CONINIT
 startok:
     sec             ; request "OK" message
 ; - - - - - - - - - - - - - - - - - - - - - - - - - - ;
@@ -636,7 +647,7 @@
     sta  gthan+1    ;
     stz  0,x        ; zero the product to begin
     stz  1,x        ;
-    .db  $cd        ; "cmp abs" naked op-code
+    !byte  $cd        ; "cmp abs" naked op-code
 mul1:
     rol  3,x        ;
 mul2:
@@ -840,7 +851,7 @@
     pla             ;   yes: update the partial
     sbc  2,x        ;     remainder and set the low
     inc  0,x        ;     bit of partial quotient
-    .db  $c9        ;     "cmp #" naked op-code
+    !byte  $c9        ;     "cmp #" naked op-code
 div3:
     pla             ;
     dey             ;
@@ -1008,18 +1019,27 @@
 ;   drop the stack and restart the "OK" prompt.
 ; 23 bytes
 pause:
-    jsr  inkey      ;
-    beq  inkeyr     ; return if no keypress
+    ; jsr  inkey      ;
+    ; beq  inkeyr     ; return if no keypress
+    jsr  CONST
+    beq  inkeyr
 waitkey:
-    jsr  inkey      ;
-    beq  waitkey    ; wait for a keypress
+    ; jsr  inkey      ;
+    ; beq  waitkey    ; wait for a keypress
+    jsr  CONST
+    beq  waitkey
     rts             ; return with it in a
 inkey:
-    lda  acia_rx    ; has a keypress arrived?
-    beq  inkeyr     ;   no: return immediately
-    cmp  #3         ; ctrl-C?
-    beq  istart     ;   yes: abort to "OK" prompt
-    cmp  #LF        ; ignore LF (Kowalski)
+    ; lda  acia_rx    ; has a keypress arrived?
+    ; beq  inkeyr     ;   no: return immediately
+    ; cmp  #3         ; ctrl-C?
+    ; beq  istart     ;   yes: abort to "OK" prompt
+    ; cmp  #LF        ; ignore LF (Kowalski)
+    jsr  CONST
+    beq  inkeyr
+    jsr  CONIN
+    cmp  #3
+    beq  istart
 inkeyr:
     rts             ;
 ;-----------------------------------------------------;
@@ -1027,23 +1047,25 @@
 ; Drop stack and abort to "OK" prompt if ctrl-C
 ; 3 bytes
 inch:
-    jsr  waitkey    ; wait for keypress, fall through
+    ; jsr  waitkey    ; wait for keypress, fall through
+    jsr  CONIN
 ; - - - - - - - - - - - - - - - - - - - - - - - - - - ;
 ; Print ASCII char in a to I/O window
 ; 16 bytes
 outch:
-    cmp  #CR        ;
-    bne  not_cr     ;
-    lda  #LF        ; add LF to CR (Kowalski)
-    sta  acia_tx    ; emit LF via transmit register
-    lda  #CR        ;
+    ; cmp  #CR        ;
+    ; bne  not_cr     ;
+    ; lda  #LF        ; add LF to CR (Kowalski)
+    ; sta  acia_tx    ; emit LF via transmit register
+    ; lda  #CR        ;
 not_cr:
-    sta  acia_tx    ; emit char via transmit register
+    ; sta  acia_tx    ; emit char via transmit register
+    jsr  CONOUT
     rts             ;
 ;-----------------------------------------------------;
 ; "\nOK\n" prompt
 ; 4 bytes
 okay:
-    .db  CR,"OK",CR
+    !text  CR,"OK",CR
 ;-----------------------------------------------------;
-    .end vtlc02     ; set start address
+    ; .end vtlc02     ; set start address
